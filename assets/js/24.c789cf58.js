(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{444:function(e,n,t){"use strict";t.r(n);var i=t(18),a=Object(i.a)({},(function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h2",{attrs:{id:"ldk-batteries"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#ldk-batteries"}},[e._v("#")]),e._v(" LDK Batteries")]),e._v(" "),t("p",[e._v("While LDK provides all the core lightning state machine logic, other\nbatteries/modules are needed to run a node. LDK interacts with these modules\nthrough generic interfaces, meaning the user can choose the implementation that\nbest suits their needs. LDK provides sample implementations for many of these\nbatteries, which are enumerated below.")]),e._v(" "),t("ul",[t("li",[e._v("On-disk storage\n"),t("ul",[t("li",[e._v("You can store the channel state any way you want - whether Google\nDrive/iCloud, a local disk, any key-value store/database/a remote server, or\nany combination of them - we provide a clean API that provides objects which\ncan be serialized into simple binary blobs, and stored in any way you wish.")]),e._v(" "),t("li",[t("a",{attrs:{href:"https://github.com/rust-bitcoin/rust-lightning/tree/main/lightning-persister",target:"_blank",rel:"noopener noreferrer"}},[t("strong",[e._v("Sample module in Rust")]),t("OutboundLink")],1)])])]),e._v(" "),t("li",[e._v("Blockchain data\n"),t("ul",[t("li",[e._v("We provide a simple "),t("code",[e._v("block_connected")]),e._v("/"),t("code",[e._v("block_disconnected")]),e._v("\nAPI which you provide block headers and transaction information to. We also\nprovide an API for getting information about transactions we wish to be\ninformed of, which is compatible with Electrum server requests/neutrino\nfiltering/etc.")]),e._v(" "),t("li",[t("a",{attrs:{href:"https://github.com/rust-bitcoin/rust-lightning/tree/main/lightning-block-sync",target:"_blank",rel:"noopener noreferrer"}},[t("strong",[e._v("Sample module in Rust")]),t("OutboundLink")],1)])])]),e._v(" "),t("li",[e._v("On-chain funds wallet/UTXO management\n"),t("ul",[t("li",[e._v('LDK owns on-chain funds as long as they are claimable as\na part of a Lightning output which can be contested - once a channel is closed\nand all on-chain outputs are spendable only by the user, we provide users\nnotifications that a UTXO is "theirs" again and it is up to them to spend it\nas they wish. Additionally, channel funding is accomplished with a generic API\nwhich notifies users of the output which needs to appear on-chain, which they\ncan then create a transaction for. Once a transaction is created, we handle\nthe rest. This is a large part of our API\'s goals - making it easier to\nintegrate Lightning into existing on-chain wallets which have their own\non-chain logic - without needing to move funds in and out of a separate\nLightning wallet with on-chain transactions and a separate private key system.')]),e._v(" "),t("li",[e._v("LDK does not currently provide a sample wallet module, but its sample node\nimplementation uses Bitcoin Core's wallet for UTXO management e.g. "),t("a",{attrs:{href:"https://github.com/lightningdevkit/ldk-sample/blob/2cd778e7acc959689e3b8462c529ffb3509aa1ec/src/main.rs#L245-L260",target:"_blank",rel:"noopener noreferrer"}},[e._v("here"),t("OutboundLink")],1)])])]),e._v(" "),t("li",[e._v("Networking\n"),t("ul",[t("li",[e._v("To enable a user to run a full Lightning node on an embedded\nmachine, we don't specify exactly how to connect to another node at all! We\nprovide a default implementation which uses TCP sockets, but, e.g., if you\nwanted to run your full Lightning node on a hardware wallet, you could, by\npiping the Lightning network messages over USB/serial and then sending them in\na TCP socket from another machine.")]),e._v(" "),t("li",[t("a",{attrs:{href:"https://github.com/rust-bitcoin/rust-lightning/tree/main/lightning-net-tokio",target:"_blank",rel:"noopener noreferrer"}},[t("strong",[e._v("Sample module in Rust")]),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://github.com/lightningdevkit/ldk-garbagecollected/tree/main/src/main/java/org/ldk/batteries",target:"_blank",rel:"noopener noreferrer"}},[t("strong",[e._v("Sample module in Java")]),t("OutboundLink")],1)])])]),e._v(" "),t("li",[e._v("Private keys\n"),t("ul",[t("li",[e._v('LDK has "default implementations", but users can choose to provide private\nkeys to RL/LDK in any way they wish following a simple API. We even support a\ngeneric API for signing transactions, allowing users to run RL/LDK without any\nprivate keys in memory and/or putting private keys only on hardware wallets.')]),e._v(" "),t("li",[t("a",{attrs:{href:"https://docs.rs/lightning/*/lightning/chain/keysinterface/struct.KeysManager.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("LDK's "),t("code",[e._v("KeysManager")]),e._v(" docs"),t("OutboundLink")],1),e._v(".\nWhile LDK's default implementation is currently within Rust-Lightning, it is\nstill considered a sample module.")])])]),e._v(" "),t("li",[e._v("Transaction filtering\n"),t("ul",[t("li",[e._v("Clients running a light client may wish to filter for transactions on a separate server, in which case LDK will tell them about transactions to filter for. More information is available in the "),t("RouterLink",{attrs:{to:"/basic-features/blockchain_data/"}},[e._v("Blockchain Data guide")]),e._v(".")],1)])]),e._v(" "),t("li",[e._v("Fee estimation\n"),t("ul",[t("li",[e._v("LDK's sample node implementation uses Bitcoin Core's fee estimation API "),t("a",{attrs:{href:"https://github.com/lightningdevkit/ldk-sample/blob/2cd778e7acc959689e3b8462c529ffb3509aa1ec/src/bitcoind_client.rs#L98-L154",target:"_blank",rel:"noopener noreferrer"}},[e._v("here"),t("OutboundLink")],1),e._v(".")])])]),e._v(" "),t("li",[e._v("Transaction broadcasting\n"),t("ul",[t("li",[e._v("LDK's sample node implementation uses Bitcoin Core's transaction broadcasting API "),t("a",{attrs:{href:"https://github.com/lightningdevkit/ldk-sample/blob/2cd778e7acc959689e3b8462c529ffb3509aa1ec/src/bitcoind_client.rs#L235-L257",target:"_blank",rel:"noopener noreferrer"}},[e._v("here"),t("OutboundLink")],1),e._v(".")])])]),e._v(" "),t("li",[e._v("Random number generation\n"),t("ul",[t("li",[e._v("Because LDK aims to make no system calls, it is restricted from generating its own randomness.")]),e._v(" "),t("li",[e._v("LDK's sample node implementation uses Rust's "),t("code",[e._v("rand")]),e._v(" crate "),t("a",{attrs:{href:"https://github.com/lightningdevkit/ldk-sample/blob/2cd778e7acc959689e3b8462c529ffb3509aa1ec/src/main.rs#L464-L465",target:"_blank",rel:"noopener noreferrer"}},[e._v("here"),t("OutboundLink")],1),e._v(" and elsewhere.")])])])])])}),[],!1,null,null,null);n.default=a.exports}}]);
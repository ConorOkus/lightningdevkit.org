(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{370:function(e,t,n){e.exports=n.p+"assets/img/ldk-architecture.b398eb41.svg"},450:function(e,t,n){"use strict";n.r(t);var a=n(18),i=Object(a.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"overview"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#overview"}},[e._v("#")]),e._v(" Overview")]),e._v(" "),a("p",[e._v("LDK is a flexible Lightning implementation with supporting batteries (or modules).")]),e._v(" "),a("div",{staticClass:"h2"},[e._v("To jump into integrating LDK with your application:")]),e._v(" "),a("ul",[a("li",[a("RouterLink",{attrs:{to:"/tutorials/build_a_node_in_java/"}},[e._v("Click here for Java")])],1),e._v(" "),a("li",[a("RouterLink",{attrs:{to:"/tutorials/build_a_node_in_rust/"}},[e._v("Click here for Rust")])],1)]),e._v(" "),a("h2",{attrs:{id:"introduction"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#introduction"}},[e._v("#")]),e._v(" Introduction")]),e._v(" "),a("p",[e._v("Lightning Development Kit (LDK) allows you to build a Lightning\nnode without needing to worry about getting all of the Lightning state machine,\nrouting, and on-chain punishment code (and other chain interactions) exactly\ncorrect. LDK tends to be suitable for use cases where a degree of\ncustomization is desired, e.g. your own chain sync, your own key management\nand/or your own storage/backup logic.")]),e._v(" "),a("p",[e._v("We are currently working on a demo node which fetches blockchain data and\non-chain funds via Bitcoin Core RPC/REST. The individual pieces of that demo\nare/will be composable, so you can pick the off-the-shelf parts you want and\nreplace the rest.")]),e._v(" "),a("h2",{attrs:{id:"ldk-batteries"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ldk-batteries"}},[e._v("#")]),e._v(" LDK Batteries")]),e._v(" "),a("p",[e._v("While LDK provides all the core Lightning state machine logic, other\nbatteries/modules are needed to run a node. LDK interacts with these modules\nthrough generic interfaces, meaning the user can choose the implementation that\nbest suits their needs. LDK provides sample implementations for many of these\nbatteries, which are enumerated below.")]),e._v(" "),a("ul",[a("li",[e._v("On-disk storage\n"),a("ul",[a("li",[e._v("You can store the channel state any way you want - whether Google\nDrive/iCloud, a local disk, any key-value store/database/a remote server, or\nany combination of them - we provide a clean API that provides objects which\ncan be serialized into simple binary blobs, and stored in any way you wish.")]),e._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/rust-bitcoin/rust-lightning/tree/main/lightning-persister",target:"_blank",rel:"noopener noreferrer"}},[a("strong",[e._v("Sample module in Rust")]),a("OutboundLink")],1)])])]),e._v(" "),a("li",[e._v("Blockchain data\n"),a("ul",[a("li",[e._v("We provide a simple "),a("code",[e._v("block_connected")]),e._v("/"),a("code",[e._v("block_disconnected")]),e._v("\nAPI which you provide block headers and transaction information to. We also\nprovide an API for getting information about transactions we wish to be\ninformed of, which is compatible with Electrum server requests/neutrino\nfiltering/etc.")]),e._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/rust-bitcoin/rust-lightning/tree/main/lightning-block-sync",target:"_blank",rel:"noopener noreferrer"}},[a("strong",[e._v("Sample module in Rust")]),a("OutboundLink")],1)])])]),e._v(" "),a("li",[e._v("On-chain funds wallet/UTXO management\n"),a("ul",[a("li",[e._v('LDK owns on-chain funds as long as they are claimable as\na part of a Lightning output which can be contested - once a channel is closed\nand all on-chain outputs are spendable only by the user, we provide users\nnotifications that a UTXO is "theirs" again and it is up to them to spend it\nas they wish. Additionally, channel funding is accomplished with a generic API\nwhich notifies users of the output which needs to appear on-chain, which they\ncan then create a transaction for. Once a transaction is created, we handle\nthe rest. This is a large part of our API\'s goals - making it easier to\nintegrate Lightning into existing on-chain wallets which have their own\non-chain logic - without needing to move funds in and out of a separate\nLightning wallet with on-chain transactions and a separate private key system.')]),e._v(" "),a("li",[e._v("LDK does not currently provide a sample wallet module, but its sample node\nimplementation uses Bitcoin Core's wallet for UTXO management e.g. "),a("a",{attrs:{href:"https://github.com/lightningdevkit/ldk-sample/blob/2cd778e7acc959689e3b8462c529ffb3509aa1ec/src/main.rs#L245-L260",target:"_blank",rel:"noopener noreferrer"}},[e._v("here"),a("OutboundLink")],1)])])]),e._v(" "),a("li",[e._v("Networking\n"),a("ul",[a("li",[e._v("To enable a user to run a full Lightning node on an embedded\nmachine, we don't specify exactly how to connect to another node at all! We\nprovide a default implementation which uses TCP sockets, but, e.g., if you\nwanted to run your full Lightning node on a hardware wallet, you could, by\npiping the Lightning network messages over USB/serial and then sending them in\na TCP socket from another machine.")]),e._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/rust-bitcoin/rust-lightning/tree/main/lightning-net-tokio",target:"_blank",rel:"noopener noreferrer"}},[a("strong",[e._v("Sample module in Rust")]),a("OutboundLink")],1)]),e._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/lightningdevkit/ldk-garbagecollected/tree/main/src/main/java/org/ldk/batteries",target:"_blank",rel:"noopener noreferrer"}},[a("strong",[e._v("Sample module in Java")]),a("OutboundLink")],1)])])]),e._v(" "),a("li",[e._v("Private keys\n"),a("ul",[a("li",[e._v('LDK has "default implementations", but users can choose to provide private\nkeys to RL/LDK in any way they wish following a simple API. We even support a\ngeneric API for signing transactions, allowing users to run RL/LDK without any\nprivate keys in memory and/or putting private keys only on hardware wallets.')]),e._v(" "),a("li",[a("a",{attrs:{href:"https://docs.rs/lightning/*/lightning/chain/keysinterface/struct.KeysManager.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("LDK's "),a("code",[e._v("KeysManager")]),e._v(" docs"),a("OutboundLink")],1),e._v(".\nWhile LDK's default implementation is currently within Rust-Lightning, it is\nstill considered a sample module.")])])]),e._v(" "),a("li",[e._v("Transaction filtering\n"),a("ul",[a("li",[e._v("Clients running a light client may wish to filter for transactions on a separate server, in which case LDK will tell them about transactions to filter for. More information is available in the "),a("RouterLink",{attrs:{to:"/basic-features/blockchain_data/"}},[e._v("Blockchain Data guide")]),e._v(".")],1)])]),e._v(" "),a("li",[e._v("Fee estimation\n"),a("ul",[a("li",[e._v("LDK's sample node implementation uses Bitcoin Core's fee estimation API "),a("a",{attrs:{href:"https://github.com/lightningdevkit/ldk-sample/blob/2cd778e7acc959689e3b8462c529ffb3509aa1ec/src/bitcoind_client.rs#L98-L154",target:"_blank",rel:"noopener noreferrer"}},[e._v("here"),a("OutboundLink")],1),e._v(".")])])]),e._v(" "),a("li",[e._v("Transaction broadcasting\n"),a("ul",[a("li",[e._v("LDK's sample node implementation uses Bitcoin Core's transaction broadcasting API "),a("a",{attrs:{href:"https://github.com/lightningdevkit/ldk-sample/blob/2cd778e7acc959689e3b8462c529ffb3509aa1ec/src/bitcoind_client.rs#L235-L257",target:"_blank",rel:"noopener noreferrer"}},[e._v("here"),a("OutboundLink")],1),e._v(".")])])]),e._v(" "),a("li",[e._v("Random number generation\n"),a("ul",[a("li",[e._v("Because LDK aims to make no system calls, it is restricted from generating its own randomness.")]),e._v(" "),a("li",[e._v("LDK's sample node implementation uses Rust's "),a("code",[e._v("rand")]),e._v(" crate "),a("a",{attrs:{href:"https://github.com/lightningdevkit/ldk-sample/blob/2cd778e7acc959689e3b8462c529ffb3509aa1ec/src/main.rs#L464-L465",target:"_blank",rel:"noopener noreferrer"}},[e._v("here"),a("OutboundLink")],1),e._v(" and elsewhere.")])])])]),e._v(" "),a("h2",{attrs:{id:"ldk-architecture"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ldk-architecture"}},[e._v("#")]),e._v(" LDK Architecture")]),e._v(" "),a("figure",[a("img",{attrs:{src:n(370),alt:"LDK Architecture"}})]),e._v(" "),a("p",[e._v("LDK's core components are shown in the center box labeled "),a("code",[e._v("lightning")]),e._v(". Boxes\nwith dotted borders are LDK's batteries â€” these must be configured with either\noff-the-shelf or custom implementations that you provide.")]),e._v(" "),a("p",[e._v("EventHandler in the diagram is not so much a necessary LDK battery, but instead\nrefers to the fact that LDK generates events that the user should handle (e.g.\nthe "),a("code",[e._v("PaymentReceived")]),e._v(" event).")]),e._v(" "),a("h2",{attrs:{id:"references"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#references"}},[e._v("#")]),e._v(" References")]),e._v(" "),a("h3",{attrs:{id:"rust-documentation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rust-documentation"}},[e._v("#")]),e._v(" "),a("a",{attrs:{href:"https://docs.rs/lightning",target:"_blank",rel:"noopener noreferrer"}},[e._v("Rust Documentation"),a("OutboundLink")],1)]),e._v(" "),a("p",[e._v("These provide the most searchable and comprehensive documentation on LDK.\nIf you're using Java and want more information on any method/struct/etc., searching\nthe Rust docs for the Rust version of that struct/method is your best bet.")]),e._v(" "),a("h3",{attrs:{id:"rust-sample-node"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rust-sample-node"}},[e._v("#")]),e._v(" "),a("a",{attrs:{href:"https://github.com/lightningdevkit/ldk-sample",target:"_blank",rel:"noopener noreferrer"}},[e._v("Rust Sample Node"),a("OutboundLink")],1)]),e._v(" "),a("p",[e._v("The sample serves as a complete reference for constructing a Lightning node with\nthe LDK. This is a good starting point if you want a self-guided tour!")]),e._v(" "),a("h3",{attrs:{id:"swift-ldk-documentation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#swift-ldk-documentation"}},[e._v("#")]),e._v(" "),a("a",{attrs:{href:"https://github.com/arik-so/SwiftLightning/tree/master/Documentation",target:"_blank",rel:"noopener noreferrer"}},[e._v("Swift LDK Documentation"),a("OutboundLink")],1)]),e._v(" "),a("p",[e._v("These docs are mainly geared towards how Swift could call LDK C bindings directly, but still may\nprovide a useful overview of Rust Lightning in the context of language bindings.")]),e._v(" "),a("h3",{attrs:{id:"ldk-architecture-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ldk-architecture-2"}},[e._v("#")]),e._v(" "),a("a",{attrs:{href:"https://docs.google.com/drawings/d/1Ql-q5gyrPnJhi7z_D39jayG0HEEVh6UEY1eULXb03Eg/edit?usp=sharing",target:"_blank",rel:"noopener noreferrer"}},[e._v("LDK Architecture"),a("OutboundLink")],1)]),e._v(" "),a("p",[e._v("Gives a high-level organization of LDK and how the pieces fit together. Variations of this diagram\nare used throughout the site. This is the primary source and is still a work in progress.")])])}),[],!1,null,null,null);t.default=i.exports}}]);